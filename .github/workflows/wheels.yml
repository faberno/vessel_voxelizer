name: Wheels

on:
  workflow_dispatch:
  pull_request:
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: dist-sdist
        path: dist/*.tar.gz

  # TODO
  # build_wheels:
  #   name: Wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest]

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: true
  #   - run: git submodule update --init --recursive

  #   - name: Fetch CUDA toolkit
  #     uses: Jimver/cuda-toolkit@v0.2.17
  #     id: cuda-toolkit
  #     with:
  #       cuda: '12.5.0'
  #       linux-local-args: '["--toolkit"]'
  #       method: 'network'
  #       sub-packages: '["nvcc", "visual_studio_integration", "cudart"]'
      
  #   - name: Setup CUDA
  #     run: |
  #       echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
  #       $CUDA_PATH=Get-ChildItem "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA" -filter "v*.*" -Directory | % { $_.fullname }
  #       echo "CUDA_PATH=$CUDA_PATH"
  #       echo "CUDA_PATH=$CUDA_PATH" >> $env:GITHUB_ENV
  #       echo "CUDA_TOOLKIT_ROOT_DIR=$CUDA_PATH" >> $env:GITHUB_ENV
  #       nvcc -V
  #   - uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.x"

  #   - name: Build release distributions
  #     run: |
  #       python -m pip install build
  #       python -m build

  #   - name: Upload distributions
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: release-dists
  #       path: dist/


  pypi-publish:
    runs-on: ubuntu-latest
    
    needs:
      - build_sdist

    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/vessel_voxelizer

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: dist-sdist
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
